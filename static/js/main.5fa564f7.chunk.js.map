{"version":3,"sources":["serviceWorker.js","components/Upload/Upload.jsx","components/Loading/Loading.jsx","components/Success/Success.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Upload","inputFile","React","createRef","dropRef","uploadField","current","click","className","ref","this","onDragEnter","props","handleDragEnter","onDragLeave","handleDragLeave","onDrop","handleDrop","action","encType","htmlFor","onClick","style","display","type","name","id","onChange","handleInputChange","Component","Loading","Success","theLink","copyToClipboard","console","log","select","document","execCommand","getSelection","removeAllRanges","src","link","alt","value","readOnly","App","state","file","upload","e","preventDefault","stopPropagation","theFile","dataTransfer","files","setState","target","fetchPost","theFormData","axios","post","then","res","data","uploadLink","FormData","append","appControl","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wDCeSC,E,4MA9BXC,UAAYC,IAAMC,Y,EAClBC,QAAUF,IAAMC,Y,EAChBE,YAAc,WACV,EAAKJ,UAAUK,QAAQC,S,uDAIvB,OACI,yBAAKC,UAAU,iBAAiBC,IAAKC,KAAKN,SACtC,iDACA,8DACA,yBACII,UAAU,MACVC,IAAKC,KAAKN,QACVO,YAAaD,KAAKE,MAAMC,gBACxBC,YAAaJ,KAAKE,MAAMG,gBACxBC,OAAQN,KAAKE,MAAMK,YAEnB,0BAAMC,OAAO,GAAGC,QAAQ,uBACpB,2BAAOC,QAAQ,cAAcC,QAASX,KAAKL,aAA3C,+BACA,2BAAOiB,MAAO,CAACC,QAAS,QAASd,IAAKC,KAAKT,UAAWuB,KAAK,OAAOC,KAAK,cAAcC,GAAG,cAAcC,SAAUjB,KAAKE,MAAMgB,sBAZvI,KAgBI,4BAAQP,QAASX,KAAKL,aAAtB,sB,GAzBKwB,aCWNC,E,uKATP,OACI,yBAAKtB,UAAU,wBACX,4CACA,yBAAKA,UAAU,gB,GALTqB,aCuBPE,E,4MAtBXC,QAAU9B,IAAMC,Y,EAChB8B,gBAAkB,WACdC,QAAQC,IAAI,EAAKH,QAAQ1B,SACzB4B,QAAQC,IAAI,EAAKH,QAAQ1B,QAAQ8B,UACjCC,SAASC,YAAY,QACrBD,SAASE,eAAeC,mB,uDAGxB,OACI,yBAAKhC,UAAU,sBACX,uBAAGA,UAAU,kBAAb,gBACA,sDACA,yBAAKiC,IAAK/B,KAAKE,MAAM8B,KAAMC,IAAI,KAC/B,yBAAKnC,UAAU,kBACX,2BAAOC,IAAKC,KAAKsB,QAASR,KAAK,OAAOoB,MAAOlC,KAAKE,MAAM8B,KAAMG,UAAQ,IACtE,4BAAQxB,QAASX,KAAKuB,iBAAtB,sB,GAhBEJ,aC8EPiB,E,4MAxEXC,MAAQ,CACJC,MAAM,EACNC,QAAQ,G,EAGZpC,gBAAkB,SAACqC,GACfA,EAAEC,iBACFD,EAAEE,mB,EAGNrC,gBAAkB,SAACmC,GACfA,EAAEC,iBACFD,EAAEE,mB,EAGNnC,WAAa,SAACiC,GACVA,EAAEC,iBACFD,EAAEE,kBAEF,IAAIC,EAAUH,EAAEI,aAAaC,MAAM,GACnC,EAAKC,SAAL,2BACO,EAAKT,OADZ,IAEIC,KAAMK,M,EAIdzB,kBAAoB,SAACsB,GACjB,EAAKM,SAAL,2BACO,EAAKT,OADZ,IAEIC,KAAME,EAAEO,OAAOF,MAAM,O,EAI7BG,UAAY,SAACC,GACTC,IACKC,KAAK,2DAA4DF,GACjEG,MAAK,SAAAC,GACF,EAAKP,SAAL,2BACO,EAAKT,OADZ,IAEIE,OAAQc,EAAIC,KAAKC,kB,mEAM7B,GAA8B,kBAApBvD,KAAKqC,MAAMC,OAA2C,IAAtBtC,KAAKqC,MAAME,OAAkB,CACnE,IAAIU,EAAc,IAAIO,SACtBP,EAAYQ,OAAO,QAASzD,KAAKqC,MAAMC,MACvCtC,KAAKgD,UAAUC,M,+BAKnB,IAAIS,EAaJ,OAXIA,EADD1D,KAAKqC,MAAMC,KACItC,KAAKqC,MAAME,OAEnB,kBAAC,EAAD,CAASP,KAAI,gEAA2DhC,KAAKqC,MAAME,UADnF,kBAAC,EAAD,MAGO,kBAAC,EAAD,CACTpC,gBAAiBH,KAAKG,gBACtBE,gBAAiBL,KAAKK,gBACtBE,WAAYP,KAAKO,WACjBW,kBAAmBlB,KAAKkB,oBAI5B,oCAAIwC,O,GArEEvC,a,MCClBwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SLwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAAAc,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.5fa564f7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass Upload extends Component {\r\n    inputFile = React.createRef()\r\n    dropRef = React.createRef()\r\n    uploadField = () => {\r\n        this.inputFile.current.click()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card card--dad\" ref={this.dropRef}>\r\n                <h2>Upload your image</h2>\r\n                <small>File should be jpeg, png...</small>\r\n                <div\r\n                    className=\"dad\"\r\n                    ref={this.dropRef}\r\n                    onDragEnter={this.props.handleDragEnter}\r\n                    onDragLeave={this.props.handleDragLeave}\r\n                    onDrop={this.props.handleDrop}\r\n                >\r\n                    <form action=\"\" encType=\"multipart/form-data\">\r\n                        <label htmlFor=\"imageUpload\" onClick={this.uploadField}>Drag & drop your image here</label>\r\n                        <input style={{display: 'none'}} ref={this.inputFile} type=\"file\" name=\"imageUpload\" id=\"imageUpload\" onChange={this.props.handleInputChange}/>\r\n                    </form>\r\n                </div>\r\n                Or\r\n                <button onClick={this.uploadField}>Choose a file</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Upload;","import React, { Component } from 'react';\r\n\r\nclass Loading extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card card--uploading\">\r\n                <h2>Uploading...</h2>\r\n                <div className=\"loader\"></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Loading;","import React, { Component } from 'react';\r\n\r\nclass Success extends Component {\r\n    theLink = React.createRef();\r\n    copyToClipboard = () => {\r\n        console.log(this.theLink.current)\r\n        console.log(this.theLink.current.select())\r\n        document.execCommand(\"copy\")\r\n        document.getSelection().removeAllRanges()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"card card--success\">\r\n                <i className=\"material-icons\">check_circle</i>\r\n                <h2>Uploaded Successfully!</h2>\r\n                <img src={this.props.link} alt=\"\"/>\r\n                <div className=\"link-clipboard\">\r\n                    <input ref={this.theLink} type=\"text\" value={this.props.link} readOnly />\r\n                    <button onClick={this.copyToClipboard}>Copy&nbsp;link</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Success;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Upload from './Upload/Upload';\r\nimport Loading from './Loading/Loading';\r\nimport Success from './Success/Success';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        file: false,\r\n        upload: false\r\n    }\r\n\r\n    handleDragEnter = (e) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n    }\r\n    \r\n    handleDragLeave = (e) => {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n\r\n    handleDrop = (e) => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        // let theFile = new FileReader();\r\n        let theFile = e.dataTransfer.files[0];\r\n        this.setState({\r\n            ...this.state,\r\n            file: theFile\r\n        })\r\n    }\r\n\r\n    handleInputChange = (e) => {\r\n        this.setState({\r\n            ...this.state,\r\n            file: e.target.files[0]\r\n        })\r\n    }\r\n\r\n    fetchPost = (theFormData) => {\r\n        axios\r\n            .post('https://api-fileupload-devchallenge.herokuapp.com/upload', theFormData)\r\n            .then(res => {\r\n                this.setState({\r\n                    ...this.state,\r\n                    upload: res.data.uploadLink\r\n                })\r\n            })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if(typeof this.state.file === \"object\" && this.state.upload === false) {\r\n            let theFormData = new FormData();\r\n            theFormData.append('image', this.state.file)\r\n            this.fetchPost(theFormData)\r\n        }\r\n    }\r\n\r\n    render() {        \r\n        let appControl;\r\n        if(this.state.file) {\r\n            appControl = !this.state.upload\r\n                ? <Loading />\r\n                : <Success link={`https://fileupload-devchallenge.herokuapp.com/uploads/${this.state.upload}`}/>\r\n        } else {\r\n            appControl = <Upload\r\n                handleDragEnter={this.handleDragEnter}\r\n                handleDragLeave={this.handleDragLeave}\r\n                handleDrop={this.handleDrop}\r\n                handleInputChange={this.handleInputChange}\r\n            />\r\n        }\r\n        return (\r\n            <>{ appControl }</>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport './assets/css/style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}